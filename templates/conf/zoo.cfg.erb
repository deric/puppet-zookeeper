# http://hadoop.apache.org/zookeeper/docs/current/zookeeperAdmin.html

# The number of milliseconds of each tick
tickTime=<%= scope.lookupvar("zookeeper::tick_time") %>
# The number of ticks that the initial
# synchronization phase can take
initLimit=<%= scope.lookupvar("zookeeper::init_limit") %>
# The number of ticks that can pass between
# sending a request and getting an acknowledgement
syncLimit=<%= scope.lookupvar("zookeeper::sync_limit") %>
#  ZooKeeper will throttle clients so that there is no more than globalOutstandingLimit outstanding requests in the system.
globalOutstandingLimit=<%= scope.lookupvar('zookeeper::global_outstanding_limit') %>
# the directory where the snapshot is stored.
dataDir=<%= scope.lookupvar("zookeeper::datastore") %>
# Place the dataLogDir to a separate physical disc for better performance
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::datalogstore")) -%>
dataLogDir=<%= scope.lookupvar("zookeeper::datalogstore") %>
<% else -%>
# dataLogDir=/disk2/zookeeper
<% end -%>

# the port at which the clients will connect
clientPort=<%= scope.lookupvar("zookeeper::client_port") %>
# interface to bind
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::client_ip")) -%>
clientPortAddress=<%= scope.lookupvar("zookeeper::client_ip") %>
<% else -%>
#clientPortAddress=
<% end -%>

<% if @enable_admin_server -%>
# Set to "false" to disable the AdminServer. By default the AdminServer is enabled.
admin.enableServer=<%= scope.lookupvar('zookeeper::admin_enable_server') %>
# The address the embedded Jetty server listens on. Defaults to 0.0.0.0.
admin.serverAddress=<%= scope.lookupvar('zookeeper::admin_server_address') %>
# The port the embedded Jetty server listens on. Defaults to 8080.
admin.serverPort=<%= scope.lookupvar('zookeeper::admin_server_port') %>
# Set the maximum idle time in milliseconds that a connection can wait before sending or receiving data. Defaults to 30000 ms.
admin.idleTimeout=<%= scope.lookupvar('zookeeper::admin_idle_timeout') %>
# The URL for listing and issuing commands relative to the root URL. Defaults to "/commands".
admin.commandURL=<%= scope.lookupvar('zookeeper::admin_command_url') %>
<% end -%>

# specify all zookeeper servers
# The first port is used by followers to connect to the leader
# The second one is used for leader election
#server.1=zookeeper1:2888:3888
#server.2=zookeeper2:2888:3888
#server.3=zookeeper3:2888:3888
<%- if scope.lookupvar("zookeeper::servers").is_a?(Hash) -%>
  <%- _servers = scope.lookupvar("zookeeper::servers") -%>
<% else -%>
<%# make sure @servers is a hash -%>
  <%- _servers = Hash.new -%>
  <%- scope.lookupvar("zookeeper::servers").map.each_with_index {|e, i|  _servers[i + 1] = e } -%>
<%- end -%>
<%- _servers.each_pair do |id, host| -%>
<%# make sure port is not included in hostname -%>
  <%- if host.index(':') -%>
      <%- host = host[0...(host.index(':'))] -%>
  <%- end -%>
  <%- if scope.lookupvar("zookeeper::observers").include? host -%>
      <%- observer_text=':observer' -%>
  <%- end -%>
<%= "server.#{id}=#{host}:%s:%s%s" % [scope.lookupvar("zookeeper::election_port"), scope.lookupvar("zookeeper::leader_port"), observer_text ] %>
<%- end -%>

# To avoid seeks ZooKeeper allocates space in the transaction log file in
# blocks of preAllocSize kilobytes. The default block size is 64M. One reason
# for changing the size of the blocks is to reduce the block size if snapshots
# are taken more often. (Also, see snapCount).
#preAllocSize=65536

# Clients can submit requests faster than ZooKeeper can process them,
# especially if there are a lot of clients. To prevent ZooKeeper from running
# out of memory due to queued requests, ZooKeeper will throttle clients so that
# there is no more than globalOutstandingLimit outstanding requests in the
# system. The default limit is 1,000.ZooKeeper logs transactions to a
# transaction log. After snapCount transactions are written to a log file a
# snapshot is started and a new transaction log file is started. The default
# snapCount is 10,000.
snapCount=<%= scope.lookupvar("zookeeper::snap_count") %>

# If this option is defined, requests will be will logged to a trace file named
# traceFile.year.month.day.
#traceFile=

# Leader accepts client connections. Default value is "yes". The leader machine
# coordinates updates. For higher update throughput at thes slight expense of
# read throughput the leader can be configured to not accept clients and focus
# on coordination.
<% if scope.lookupvar("zookeeper::leader") -%>
leaderServes=yes
<% else -%>
leaderServes=no
<% end -%>

# Since 3.4.0: When enabled, ZooKeeper auto purge feature retains the autopurge.
# snapRetainCount most recent snapshots and the corresponding transaction logs
# in the dataDir and dataLogDir respectively and deletes the rest.
# Defaults to 3. Minimum value is 3.
autopurge.snapRetainCount=<%= scope.lookupvar("zookeeper::snap_retain_count") %>

# Since 3.4.0: The time interval in hours for which the purge task has to be
# triggered. Set to a positive integer (1 and above) to enable the auto purging.
# Defaults to 0.
autopurge.purgeInterval=<%= scope.lookupvar("zookeeper::purge_interval") %>

# Maximum allowed connections
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::max_allowed_connections")) -%>
maxClientCnxns=<%= scope.lookupvar("zookeeper::max_allowed_connections") %>
<% else -%>
#maxClientCnxns=60
<% end -%>

<% if scope.lookupvar("zookeeper::peer_type") != 'UNSET' -%>
# Zookeeper peer type
peerType=<%= scope.lookupvar("zookeeper::peer_type") %>
<% end -%>

# The minimum session timeout in milliseconds that the server will allow the # client to negotiate. Defaults to 2 times the tickTime.
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::min_session_timeout")) -%>
minSessionTimeout=<%= scope.lookupvar("zookeeper::min_session_timeout") %>
<% else -%>
#minSessionTimeout=2
<% end -%>

# The maximum session timeout in milliseconds that the server will allow the # client to negotiate. Defaults to 20 times the tickTime.
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::max_session_timeout")) -%>
maxSessionTimeout=<%= scope.lookupvar("zookeeper::max_session_timeout") %>
<% else -%>
#maxSessionTimeout=20
<% end -%>

<% if scope.lookupvar("zookeeper::use_sasl_auth") -%>
# Enable SASL authentication and use the default provider/renew provided by cloudera
authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
jaasLoginRenew=3600000
<% if scope.lookupvar("zookeeper::remove_host_principal") -%>
kerberos.removeHostFromPrincipal=true
<% end -%>
<% if scope.lookupvar("zookeeper::remove_realm_principal") -%>
kerberos.removeRealmFromPrincipal=true
<% end -%>
<% end -%>

<% unless scope.lookupvar("zookeeper::whitelist_4lw").empty? -%>
# Supported since 3.4.10
4lw.commands.whitelist=<%= scope.lookupvar("zookeeper::whitelist_4lw").join(',') %>
<% end -%>