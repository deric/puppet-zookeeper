# http://hadoop.apache.org/zookeeper/docs/current/zookeeperAdmin.html

# The number of milliseconds of each tick
tickTime=<%= scope.lookupvar("zookeeper::tick_time") %>
# The number of ticks that the initial
# synchronization phase can take
initLimit=<%= scope.lookupvar("zookeeper::init_limit") %>
# The number of ticks that can pass between
# sending a request and getting an acknowledgement
syncLimit=<%= scope.lookupvar("zookeeper::sync_limit") %>
#  ZooKeeper will throttle clients so that there is no more than globalOutstandingLimit outstanding requests in the system.
globalOutstandingLimit=<%= scope.lookupvar('zookeeper::global_outstanding_limit') %>
# the directory where the snapshot is stored.
dataDir=<%= scope.lookupvar("zookeeper::datastore") %>
# Place the dataLogDir to a separate physical disc for better performance
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::datalogstore")) -%>
dataLogDir=<%= scope.lookupvar("zookeeper::datalogstore") %>
<% else -%>
# dataLogDir=/disk2/zookeeper
<% end -%>

# the port at which the clients will connect
<% if scope.lookupvar("zookeeper::secure_port_only") -%>
#clientPort=
<% else -%>
clientPort=<%= scope.lookupvar("zookeeper::client_port") %>
<% end -%>
# interface to bind
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::client_ip")) and ! scope.lookupvar("zookeeper::secure_port_only") -%>
clientPortAddress=<%= scope.lookupvar("zookeeper::client_ip") %>
<% else -%>
#clientPortAddress=
<% end -%>

# specify all zookeeper servers
# The first port is used by followers to connect to the leader
# The second one is used for leader election
#server.1=zookeeper1:2888:3888
#server.2=zookeeper2:2888:3888
#server.3=zookeeper3:2888:3888
<%- if scope.lookupvar("zookeeper::servers").is_a?(Hash) -%>
  <%- _servers = scope.lookupvar("zookeeper::servers") -%>
<% else -%>
<%# make sure @servers is a hash -%>
  <%- _servers = Hash.new -%>
  <%- scope.lookupvar("zookeeper::servers").map.each_with_index {|e, i|  _servers[i + 1] = e } -%>
<%- end -%>
<%- _servers.each_pair do |id, host| -%>
<%# make sure port is not included in hostname -%>
  <%- if host.index(':') -%>
      <%- host = host[0...(host.index(':'))] -%>
  <%- end -%>
  <%- if scope.lookupvar("zookeeper::observers").include? host -%>
      <%- observer_text=':observer' -%>
  <%- end -%>
<%= "server.#{id}=#{host}:%s:%s%s" % [scope.lookupvar("zookeeper::election_port"), scope.lookupvar("zookeeper::leader_port"), observer_text ] %>
<%- end -%>

# Bind election_port and leader_port to all interfaces (0.0.0.0)
quorumListenOnAllIPs=<%= scope.lookupvar("zookeeper::quorum_listen_on_all_ips") %>

# To avoid seeks ZooKeeper allocates space in the transaction log file in
# blocks of preAllocSize kilobytes. The default block size is 64M. One reason
# for changing the size of the blocks is to reduce the block size if snapshots
# are taken more often. (Also, see snapCount).
preAllocSize=<%= scope.lookupvar("zookeeper::pre_alloc_size") %>

# Clients can submit requests faster than ZooKeeper can process them,
# especially if there are a lot of clients. To prevent ZooKeeper from running
# out of memory due to queued requests, ZooKeeper will throttle clients so that
# there is no more than globalOutstandingLimit outstanding requests in the
# system. The default limit is 1,000.ZooKeeper logs transactions to a
# transaction log. After snapCount transactions are written to a log file a
# snapshot is started and a new transaction log file is started. The default
# snapCount is 10,000.
snapCount=<%= scope.lookupvar("zookeeper::snap_count") %>

# ZooKeeper records its transactions using snapshots and a transaction log
# (think write-ahead log). The total size in bytes allowed in the set of
# transactions recorded in the transaction log before a snapshot can be taken
# (and the transaction log rolled) is determined by snapSize.
# In order to prevent all of the machines in the quorum from taking a snapshot
# at the same time, each ZooKeeper server will take a snapshot when the
# size in bytes of the set of transactions in the transaction log reaches a
# runtime generated random value in the [snapSize/2+1, snapSize] range.
# Each file system has a minimum standard file size and in order to for
# valid functioning of this feature, the number chosen must be larger than
# that value. The default snapSizeLimitInKb is 4,194,304 (4GB).
# A non-positive value will disable the feature.
snapSizeLimitInKb=<%= scope.lookupvar("zookeeper::snap_size_limit_kb") %>

# Zookeeper maintains an in-memory list of last committed requests for fast
# synchronization with followers when the followers are not too behind.
# This improves sync performance in case when your snapshots are
# large (>100,000). The default value is 500 which is the recommended minimum.
commitLogCount=<%= scope.lookupvar("zookeeper::commit_log_count") %>

# Transaction log file size in Kb
# This feature is turned off by default and snapCount and
# snapSizeLimitInKb are the only values that limit transaction log size.
# When enabled Zookeeper will roll the log when any of the limits is hit.
# Please note that actual log size can exceed this value by the size of the
# serialized transaction. On the other hand, if this value is set too close
# to (or smaller than) preAllocSize, it can cause Zookeeper to roll the log for
# every transaction. While this is not a correctness issue, this may cause
# severely degraded performance. To avoid this and to get most out of this
# feature, it is recommended to set the value to N * preAllocSize where N >= 2.
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::txn_log_size_limit_kb")) -%>
txnLogSizeLimitInKb=<%= scope.lookupvar("zookeeper::txn_log_size_limit_kb") %>
<% else -%>
# txnLogSizeLimitInKb=
<% end -%>

# If this option is defined, requests will be will logged to a trace file named
# traceFile.year.month.day.
#traceFile=

<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::port_unification")) -%>
# Supported since 3.5.5
portUnification=<%= scope.lookupvar("zookeeper::port_unification") %>
<% end -%>
# Leader accepts client connections. Default value is "yes". The leader machine
# coordinates updates. For higher update throughput at thes slight expense of
# read throughput the leader can be configured to not accept clients and focus
# on coordination.
<% if scope.lookupvar("zookeeper::leader") -%>
leaderServes=yes
<% else -%>
leaderServes=no
<% end -%>

# Since 3.4.0: When enabled, ZooKeeper auto purge feature retains the autopurge.
# snapRetainCount most recent snapshots and the corresponding transaction logs
# in the dataDir and dataLogDir respectively and deletes the rest.
# Defaults to 3. Minimum value is 3.
autopurge.snapRetainCount=<%= scope.lookupvar("zookeeper::snap_retain_count") %>

# Since 3.4.0: The time interval in hours for which the purge task has to be
# triggered. Set to a positive integer (1 and above) to enable the auto purging.
# Defaults to 0.
autopurge.purgeInterval=<%= scope.lookupvar("zookeeper::purge_interval") %>

# Maximum of concurrent connections (per client Port of each server )
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::max_connexions")) -%>
maxCnxns=<%= scope.lookupvar("zookeeper::max_connexions") %>
<% else -%>
#maxCnxns=0
<% end -%>

# Maximum of concurrent connections (at the socket level) that a single client
# identified by IP address, may make to a single member of the ZooKeeper ensemble
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::max_allowed_connections")) -%>
maxClientCnxns=<%= scope.lookupvar("zookeeper::max_allowed_connections") %>
<% else -%>
#maxClientCnxns=60
<% end -%>

<% if scope.lookupvar("zookeeper::peer_type") != 'UNSET' -%>
# Zookeeper peer type
peerType=<%= scope.lookupvar("zookeeper::peer_type") %>
<% end -%>

# The minimum session timeout in milliseconds that the server will allow the
# client to negotiate. Defaults to 2 times the tickTime.
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::min_session_timeout")) -%>
minSessionTimeout=<%= scope.lookupvar("zookeeper::min_session_timeout") %>
<% else -%>
#minSessionTimeout=2
<% end -%>

# The maximum session timeout in milliseconds that the server will allow the
# client to negotiate. Defaults to 20 times the tickTime.
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::max_session_timeout")) -%>
maxSessionTimeout=<%= scope.lookupvar("zookeeper::max_session_timeout") %>
<% else -%>
#maxSessionTimeout=20
<% end -%>

<% if scope.lookupvar("zookeeper::use_sasl_auth") -%>
# Enable SASL authentication and use the default provider/renew provided by cloudera
authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
jaasLoginRenew=3600000
<% if scope.lookupvar("zookeeper::remove_host_principal") -%>
kerberos.removeHostFromPrincipal=true
<% end -%>
<% if scope.lookupvar("zookeeper::remove_realm_principal") -%>
kerberos.removeRealmFromPrincipal=true
<% end -%>
<% end -%>

<% if scope.lookupvar("zookeeper::ssl") -%>
# Supported since 3.5.1
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::secure_client_port")) -%>
secureClientPort=<%= scope.lookupvar("zookeeper::secure_client_port") %>
<% else -%>
#secureClientPort=2281
<% end -%>

# Client TLS configuration
serverCnxnFactory=org.apache.zookeeper.server.NettyServerCnxnFactory
# Server will only accept connections and requests from clients that have
# authenticated with server via configured auth scheme
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::enforce_auth_enabled")) -%>
enforce.auth.enabled=<%= scope.lookupvar("zookeeper::enforce_auth_enabled") %>
# Comma separated list of authentication schemes
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::enforce_auth_schemes")) -%>
enforce.auth.schemes=<%= scope.lookupvar("zookeeper::enforce_auth_schemes") %>
<% else -%>
#enforce.auth.schemes=
<% end -%>
<% else -%>
#enforce.auth.enabled=
<% end -%>

# Force TLS version
ssl.protocol=<%= scope.lookupvar("zookeeper::ssl_protocol") %>
# Hostname verification (default yes)
ssl.hostnameVerification=<%= scope.lookupvar("zookeeper::ssl_hostname_verification") %>
# Client authentication
ssl.clientAuth=<%= scope.lookupvar("zookeeper::ssl_clientauth") %>

## Hint: if PEM is used, private key must be in PKCS#8 format
# Line must begin with "-----BEGIN PRIVATE KEY-----"
# and not "-----BEGIN RSA PRIVATE KEY-----"
# Client TLS configuration
ssl.keyStore.location=<%= scope.lookupvar("zookeeper::keystore_location") %>
ssl.keyStore.type=<%= scope.lookupvar("zookeeper::keystore_type") %>
<% if scope.lookupvar("zookeeper::keystore_password") %>
ssl.keyStore.password=<%= scope.lookupvar("zookeeper::keystore_password") %>
<% end -%>

## Hint: if PEM is used, private key must be in PKCS#8 format
# Line must begin with "-----BEGIN PRIVATE KEY-----"
# and not "-----BEGIN RSA PRIVATE KEY-----"
ssl.trustStore.location=<%= scope.lookupvar("zookeeper::truststore_location") %>
ssl.trustStore.type=<%= scope.lookupvar("zookeeper::truststore_type") %>
<% if scope.lookupvar("zookeeper::truststore_password") %>
ssl.trustStore.password=<%= scope.lookupvar("zookeeper::truststore_password") %>
<% end -%>
<% if scope.lookupvar("zookeeper::ssl_ciphersuites") %>
# Set allowed Ciphers
ssl.ciphersuites=<%= scope.lookupvar("zookeeper::ssl_ciphersuites") %>
<% end -%>

# Server TLS configuration
sslQuorum=<%= scope.lookupvar("zookeeper::ssl_quorum") %>
# Force TLS version
ssl.quorum.protocol=<%= scope.lookupvar("zookeeper::ssl_quorum_protocol") %>
# Hostname verification from node to node (default yes)
ssl.quorum.hostnameVerification=<%= scope.lookupvar("zookeeper::ssl_quorum_hostname_verification") %>
<% if ! [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::ssl_quorum_clientauth")) -%>
# Client authentication from node to node
ssl.quorum.clientAuth=<%= scope.lookupvar("zookeeper::ssl_quorum_clientauth") %>
<% end -%>
## Hint: if PEM is used, private key must be in PKCS#8 format
# Line must begin with "-----BEGIN PRIVATE KEY-----"
# and not "-----BEGIN RSA PRIVATE KEY-----"
ssl.quorum.keyStore.location=<%= scope.lookupvar("zookeeper::keystore_quorum_location") %>
ssl.quorum.keyStore.type=<%= scope.lookupvar("zookeeper::keystore_quorum_type") %>
<% if scope.lookupvar("zookeeper::keystore_quorum_password") %>
ssl.quorum.keyStore.password=<%= scope.lookupvar("zookeeper::keystore_quorum_password") %>
<% end -%>

ssl.quorum.trustStore.type=<%= scope.lookupvar("zookeeper::truststore_quorum_type") %>
## Hint: if PEM is used, private key must be in PKCS#8 format
# Line must begin with "-----BEGIN PRIVATE KEY-----"
# and not "-----BEGIN RSA PRIVATE KEY-----"
ssl.quorum.trustStore.location=<%= scope.lookupvar("zookeeper::truststore_quorum_location") %>
<% if scope.lookupvar("zookeeper::truststore_quorum_password") %>
ssl.quorum.trustStore.password=<%= scope.lookupvar("zookeeper::truststore_quorum_password") %>
<% end -%>

<% if scope.lookupvar("zookeeper::ssl_quorum_ciphersuites") %>
# Set allowed Ciphers
ssl.quorum.ciphersuites=<%=scope.lookupvar("zookeeper::ssl_quorum_ciphersuites") %>
<% end -%>
<% end -%>

<% unless scope.lookupvar("zookeeper::whitelist_4lw").empty? -%>
# Supported since 3.4.10
4lw.commands.whitelist=<%= scope.lookupvar("zookeeper::whitelist_4lw").join(',') %>
<% end -%>

## AdminServer configuration
# Set to "false" to disable the AdminServer. Enabled by default.
<% if scope.lookupvar("zookeeper::admin_server_enabled") -%>
admin.enableServer=true
# The address the embedded Jetty server listens on. Defaults to 0.0.0.0.
admin.serverAddress=<%= scope.lookupvar("zookeeper::admin_server_address") %>
# The port the embedded Jetty server listens on. Defaults to 8080.
admin.serverPort=<%= scope.lookupvar("zookeeper::admin_server_port") %>
# Maximum idle time in milliseconds that a connection can wait. Defaults to 30000 ms.
admin.idleTimeout=<%= scope.lookupvar("zookeeper::admin_idle_timeout") %>
# Commands URL relative to the root URL. Defaults to "/commands".
admin.commandURL=<%= scope.lookupvar("zookeeper::admin_command_url") %>
# Force AdminServer to use SSL. Defaults to disabled.
admin.forceHttps=<%= scope.lookupvar("zookeeper::admin_force_https") %>
# Accept both HTTP and HTTPS traffic. Defaults to disabled.
admin.portUnification=<%= scope.lookupvar("zookeeper::admin_port_unification") %>
<% else -%>
admin.enableServer=false
<% end -%>

# Supported since 3.6
## Metrics Providers
#
# https://prometheus.io Metrics Exporter
<% unless [nil, :undefined, :undef].include?(scope.lookupvar("zookeeper::metrics_provider_classname")) -%>
metricsProvider.className=<%= scope.lookupvar("zookeeper::metrics_provider_classname") %>
metricsProvider.httpPort=<%= scope.lookupvar("zookeeper::metrics_provider_http_port") %>
metricsProvider.exportJvmInfo=<%= scope.lookupvar("zookeeper::metrics_provider_export_jvm_info") %>
<% else -%>
#metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider
#metricsProvider.httpPort=7000
#metricsProvider.exportJvmInfo=true
<% end -%>
